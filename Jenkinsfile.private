def lastStage = ''
node('node') {
  properties([disableConcurrentBuilds()])
  try {
    currentBuild.result = "SUCCESS"

    stage('Checkout') {
      lastStage = env.STAGE_NAME
      checkout scm

      echo "Current build result: ${currentBuild.result}"
    }

    stage('Build Images') {
      lastStage = env.STAGE_NAME
      sh 'make -f Makefile.storj images'

      echo "Current build result: ${currentBuild.result}"
    }

    stage('Push Images') {
      lastStage = env.STAGE_NAME
      sh 'make -f Makefile.storj push-images'

      echo "Current build result: ${currentBuild.result}"
    }
  }
  catch (err) {
    echo "Caught errors! ${err}"
    echo "Setting build result to FAILURE"
    currentBuild.result = "FAILURE"

     slackSend color: 'danger', channel: '#team-gateway-mt', message: "@gateway-mt ${env.BRANCH_NAME} build failed during stage ${lastStage} ${env.BUILD_URL}"

     mail from: 'builds@storj.io',
       replyTo: 'builds@storj.io',
       to: 'builds@storj.io',
       subject: "storj/storj branch ${env.BRANCH_NAME} build failed",
       body: "Project build log: ${env.BUILD_URL}"

     throw err

  }
  finally {
    stage('Cleanup') {
      sh 'make -f Makefile.storj clean-images'
      deleteDir()
    }

  }
}
